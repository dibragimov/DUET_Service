#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DUETCPMConsole.LoggingLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Logs")]
	public partial class LoggingDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertOperation(Operation instance);
    partial void UpdateOperation(Operation instance);
    partial void DeleteOperation(Operation instance);
    partial void InsertWorklog(Worklog instance);
    partial void UpdateWorklog(Worklog instance);
    partial void DeleteWorklog(Worklog instance);
    #endregion
		
		public LoggingDataClassesDataContext() : 
				base(global::DUETCPMConsole.Properties.Settings.Default.LogsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LoggingDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LoggingDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LoggingDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LoggingDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Operation> Operations
		{
			get
			{
				return this.GetTable<Operation>();
			}
		}
		
		public System.Data.Linq.Table<Worklog> Worklogs
		{
			get
			{
				return this.GetTable<Worklog>();
			}
		}
	}
	
	[Table(Name="dbo.Operations")]
	public partial class Operation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SessionID;
		
		private System.Nullable<int> _ClientAccountID;
		
		private System.Nullable<int> _ContrAgentAccountID;
		
		private System.Nullable<int> _ContrAgentClientAccountID;
		
		private System.Nullable<int> _ContractBindID;
		
		private System.Nullable<System.DateTime> _ExternalDocDate;
		
		private string _ExternalDocNumber;
		
		private System.Nullable<decimal> _feeAmount;
		
		private int _FunctionType;
		
		private string _PaymentDetails;
		
		private decimal _TransactAmount;
		
		private System.Nullable<System.DateTime> _CurrentDate;
		
		private System.Nullable<int> _Result;
		
		private string _ResultNote;
		
		private string _ResultLog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIDChanging(long value);
    partial void OnSessionIDChanged();
    partial void OnClientAccountIDChanging(System.Nullable<int> value);
    partial void OnClientAccountIDChanged();
    partial void OnContrAgentAccountIDChanging(System.Nullable<int> value);
    partial void OnContrAgentAccountIDChanged();
    partial void OnContrAgentClientAccountIDChanging(System.Nullable<int> value);
    partial void OnContrAgentClientAccountIDChanged();
    partial void OnContractBindIDChanging(System.Nullable<int> value);
    partial void OnContractBindIDChanged();
    partial void OnExternalDocDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExternalDocDateChanged();
    partial void OnExternalDocNumberChanging(string value);
    partial void OnExternalDocNumberChanged();
    partial void OnfeeAmountChanging(System.Nullable<decimal> value);
    partial void OnfeeAmountChanged();
    partial void OnFunctionTypeChanging(int value);
    partial void OnFunctionTypeChanged();
    partial void OnPaymentDetailsChanging(string value);
    partial void OnPaymentDetailsChanged();
    partial void OnTransactAmountChanging(decimal value);
    partial void OnTransactAmountChanged();
    partial void OnCurrentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCurrentDateChanged();
    partial void OnResultChanging(System.Nullable<int> value);
    partial void OnResultChanged();
    partial void OnResultNoteChanging(string value);
    partial void OnResultNoteChanged();
    partial void OnResultLogChanging(string value);
    partial void OnResultLogChanged();
    #endregion
		
		public Operation()
		{
			OnCreated();
		}
		
		[Column(Storage="_SessionID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClientAccountID", DbType="Int")]
		public System.Nullable<int> ClientAccountID
		{
			get
			{
				return this._ClientAccountID;
			}
			set
			{
				if ((this._ClientAccountID != value))
				{
					this.OnClientAccountIDChanging(value);
					this.SendPropertyChanging();
					this._ClientAccountID = value;
					this.SendPropertyChanged("ClientAccountID");
					this.OnClientAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContrAgentAccountID", DbType="Int")]
		public System.Nullable<int> ContrAgentAccountID
		{
			get
			{
				return this._ContrAgentAccountID;
			}
			set
			{
				if ((this._ContrAgentAccountID != value))
				{
					this.OnContrAgentAccountIDChanging(value);
					this.SendPropertyChanging();
					this._ContrAgentAccountID = value;
					this.SendPropertyChanged("ContrAgentAccountID");
					this.OnContrAgentAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContrAgentClientAccountID", DbType="Int")]
		public System.Nullable<int> ContrAgentClientAccountID
		{
			get
			{
				return this._ContrAgentClientAccountID;
			}
			set
			{
				if ((this._ContrAgentClientAccountID != value))
				{
					this.OnContrAgentClientAccountIDChanging(value);
					this.SendPropertyChanging();
					this._ContrAgentClientAccountID = value;
					this.SendPropertyChanged("ContrAgentClientAccountID");
					this.OnContrAgentClientAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContractBindID", DbType="Int")]
		public System.Nullable<int> ContractBindID
		{
			get
			{
				return this._ContractBindID;
			}
			set
			{
				if ((this._ContractBindID != value))
				{
					this.OnContractBindIDChanging(value);
					this.SendPropertyChanging();
					this._ContractBindID = value;
					this.SendPropertyChanged("ContractBindID");
					this.OnContractBindIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExternalDocDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExternalDocDate
		{
			get
			{
				return this._ExternalDocDate;
			}
			set
			{
				if ((this._ExternalDocDate != value))
				{
					this.OnExternalDocDateChanging(value);
					this.SendPropertyChanging();
					this._ExternalDocDate = value;
					this.SendPropertyChanged("ExternalDocDate");
					this.OnExternalDocDateChanged();
				}
			}
		}
		
		[Column(Storage="_ExternalDocNumber", DbType="NVarChar(50)")]
		public string ExternalDocNumber
		{
			get
			{
				return this._ExternalDocNumber;
			}
			set
			{
				if ((this._ExternalDocNumber != value))
				{
					this.OnExternalDocNumberChanging(value);
					this.SendPropertyChanging();
					this._ExternalDocNumber = value;
					this.SendPropertyChanged("ExternalDocNumber");
					this.OnExternalDocNumberChanged();
				}
			}
		}
		
		[Column(Storage="_feeAmount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> feeAmount
		{
			get
			{
				return this._feeAmount;
			}
			set
			{
				if ((this._feeAmount != value))
				{
					this.OnfeeAmountChanging(value);
					this.SendPropertyChanging();
					this._feeAmount = value;
					this.SendPropertyChanged("feeAmount");
					this.OnfeeAmountChanged();
				}
			}
		}
		
		[Column(Storage="_FunctionType", DbType="Int NOT NULL")]
		public int FunctionType
		{
			get
			{
				return this._FunctionType;
			}
			set
			{
				if ((this._FunctionType != value))
				{
					this.OnFunctionTypeChanging(value);
					this.SendPropertyChanging();
					this._FunctionType = value;
					this.SendPropertyChanged("FunctionType");
					this.OnFunctionTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentDetails", DbType="NVarChar(250)")]
		public string PaymentDetails
		{
			get
			{
				return this._PaymentDetails;
			}
			set
			{
				if ((this._PaymentDetails != value))
				{
					this.OnPaymentDetailsChanging(value);
					this.SendPropertyChanging();
					this._PaymentDetails = value;
					this.SendPropertyChanged("PaymentDetails");
					this.OnPaymentDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_TransactAmount", DbType="Decimal(18,0) NOT NULL")]
		public decimal TransactAmount
		{
			get
			{
				return this._TransactAmount;
			}
			set
			{
				if ((this._TransactAmount != value))
				{
					this.OnTransactAmountChanging(value);
					this.SendPropertyChanging();
					this._TransactAmount = value;
					this.SendPropertyChanged("TransactAmount");
					this.OnTransactAmountChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CurrentDate
		{
			get
			{
				return this._CurrentDate;
			}
			set
			{
				if ((this._CurrentDate != value))
				{
					this.OnCurrentDateChanging(value);
					this.SendPropertyChanging();
					this._CurrentDate = value;
					this.SendPropertyChanged("CurrentDate");
					this.OnCurrentDateChanged();
				}
			}
		}
		
		[Column(Storage="_Result", DbType="Int")]
		public System.Nullable<int> Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[Column(Storage="_ResultNote", DbType="NVarChar(100)")]
		public string ResultNote
		{
			get
			{
				return this._ResultNote;
			}
			set
			{
				if ((this._ResultNote != value))
				{
					this.OnResultNoteChanging(value);
					this.SendPropertyChanging();
					this._ResultNote = value;
					this.SendPropertyChanged("ResultNote");
					this.OnResultNoteChanged();
				}
			}
		}
		
		[Column(Storage="_ResultLog", DbType="NVarChar(250)")]
		public string ResultLog
		{
			get
			{
				return this._ResultLog;
			}
			set
			{
				if ((this._ResultLog != value))
				{
					this.OnResultLogChanging(value);
					this.SendPropertyChanging();
					this._ResultLog = value;
					this.SendPropertyChanged("ResultLog");
					this.OnResultLogChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Worklogs")]
	public partial class Worklog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Code;
		
		private System.DateTime _Time;
		
		private string _Message;
		
		private string _Tip;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(System.Nullable<int> value);
    partial void OnCodeChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnTipChanging(string value);
    partial void OnTipChanged();
    #endregion
		
		public Worklog()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="Int")]
		public System.Nullable<int> Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_Tip", DbType="NVarChar(250)")]
		public string Tip
		{
			get
			{
				return this._Tip;
			}
			set
			{
				if ((this._Tip != value))
				{
					this.OnTipChanging(value);
					this.SendPropertyChanging();
					this._Tip = value;
					this.SendPropertyChanged("Tip");
					this.OnTipChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
